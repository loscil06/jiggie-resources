vec2 scale = vec2(1./8., 1./8.);

const float iSeed = {{ seed }}; // seed should be between 1 and 10000.
#define ROW_OFFSET
#define HEXAGON
#define HOLES
#define RIDGES
#ifdef HEXAGON
#ifndef ROW_OFFSET
#define ROW_OFFSET
#endif
#endif
#define FAR 20.

float objID;


mat2 rot2(in float a){ float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }


float hash21(vec2 p){
    vec3 p3 = fract(vec3(p.xyx)*.1031);
    p3 += dot(p3, p3.yzx + 43.123);
    return fract((p3.x + p3.y)*p3.z);
}


float hm(in vec2 p, inout float tm){
    float rnd = hash21(p + .13 + iSeed);
    tm = mod(rnd*8. + iTime*4./6.2831, 8.);
    tm = (tm<1.)? tm : 0.;
    float waveHeight = dot(sin(p*1.4 - cos(p.yx*2.2 + mod(iTime, 6.2831))*2.), vec2(.25)) + .5;
    float h = .5 - cos(tm*6.2831)*.5;
    return (h/4. + .25)*waveHeight + h;
}


float opExtrusion(in float sdf, in float pz, in float h){
    vec2 w = vec2(sdf, abs(pz) - h);
    return min(max(w.x, w.y), 0.) + length(max(w, 0.));
}


#ifdef HEXAGON
float sHexS(in vec2 p, float r, in float sf){
    const vec3 k = vec3(.5, -.8660254, .57735); // pi/6: cos, sin, tan.
    p = abs(p);
    p -= 2.*min(dot(k.xy, p), 0.)*k.xy;
    r -= sf;
    return length(p - vec2(r, clamp(p.y, -k.z*r, k.z*r)))*sign(p.x - r) - sf;
}
#endif


float sBoxS(in vec2 p, in vec2 b, in float sf){
    vec2 d = abs(p) - b + sf;
    return min(max(d.x, d.y), 0.) + length(max(d, 0.)) - sf;
}


float shape;


vec4 blocks(vec3 q3){
    vec2 l = scale;
    vec2 s = scale*2.;
    #ifdef HEXAGON
    vec2 hSc = vec2(1, scale.y/scale.x*2./1.732);
    #endif
    float minSc = min(scale.x, scale.y);
    float d = 1e5;
    vec2 p, ip;
    vec2 id = vec2(0);
    #ifdef ROW_OFFSET
    vec2[4] ps4 = vec2[4](vec2(-.25, .25), vec2(.25), vec2(.5, -.25), vec2(0, -.25));
    #else
    vec2[4] ps4 = vec2[4](vec2(-.25, .25), vec2(.25), vec2(.25, -.25), vec2(-.25));
    #endif
    float data = 0.; // Extra data.
    shape = 1e5;
    for(int i = min(0, iFrame); i<4; i++){
        p = q3.xy;
        ip = floor(p/s - ps4[i]) + .5; // Local tile ID.
        vec2 idi = (ip + ps4[i])*s;
        p -= idi;
        float tm;
        float h = hm(idi, tm);
        float dir = (hash21(idi +.07)<.5)? 1. : -1.;
        dir *= (hash21(idi +.05)<.5)? 2. : 1.;
        float delay = .175;
        const float totRot = 3.14159;
        mat2 cR = (abs(tm - .5)<.5 - delay)?
        rot2(dir*(tm - delay)/(1. - delay*2.)*totRot) : mat2(1, 0, 0, 1);
        vec3 p3 = vec3(p, q3.z + (h*scale.y*2. - (l.y/2. - .02)*1.));
        p3.yz *= cR;
        const float ew = .0125;
        #ifdef HEXAGON
        float di2D = sHexS(p3.xy, minSc/1.732 - ew, .01);
        float shp = sHexS(p, minSc/1.732 - ew, .01);
        #else
        float di2D = sBoxS(p3.xy, l/2. - ew, .01);
        float shp = sBoxS(p.xy, l/2. - ew, .01);
        #endif
        #ifdef HOLES
        if((i&1)==0)
        {
            di2D = max(di2D, -(di2D + minSc/3.5));
        }
        #endif
        shape = min(shape, shp);
        float di = opExtrusion(di2D, p3.z, l.y/2.*(1. - h*.0) - ew);
        #ifdef RAISED
        di += di2D*.25;//min(di2D, di2DB)*.5;
        #endif

        #ifdef RIDGES
        di += smoothstep(-.5, .5, sin(di2D/minSc*6.2831*5.))*.005;
        #endif

        if(di<d){
            d = di;
            id = idi;
            data = di2D;
        }
    }

    return vec4(d, id, data);
}


vec4 gID;

float map(vec3 p){

    float fl = (-p.z + .02);
    vec4 d4 = blocks(p);
    gID = d4;
    fl = max(fl, -max(shape, abs(p.z) - scale.y));
    #ifdef RIDGES
    float minSc = min(scale.x, scale.y);
    fl -= smoothstep(-.5, .5, sin(shape/minSc*6.2831*5.))*.005;
    #endif
    #ifdef RAISED
    fl -= shape*.25;
    #endif
    objID = fl<d4.x? 1. : 0.;
    return  min(fl, d4.x);
}

float trace(in vec3 ro, in vec3 rd){
    float t = 0., d;
    for(int i = min(0, iFrame); i<64; i++){
        d = map(ro + rd*t);
        if(abs(d)<.001 || t>FAR) break;
        t += i<32? d*.4 : d*.9;
    }
    return min(t, FAR);
}


vec3 getNormal(in vec3 p, float t) {
    float sgn = 1.;
    vec3 e = vec3(.001, 0, 0), mp = e.zzz;
    for(int i = min(iFrame, 0); i<6; i++){
        mp.x += map(p + sgn*e)*sgn;
        sgn = -sgn;
        if((i&1)==1){ mp = mp.yzx; e = e.zxy; }
    }

    return normalize(mp);
}


float softShadow(vec3 ro, vec3 lp, vec3 n, float k){
    const int maxIterationsShad = 32;

    ro += n*.0015;
    vec3 rd = lp - ro;

    float shade = 1.;
    float t = 0.;
    float end = max(length(rd), .0001);
    rd /= end;
    for (int i = min(iFrame, 0); i<maxIterationsShad; i++){
        float d = map(ro + rd*t);
        shade = min(shade, k*d/t);
        t += clamp(d, .01, .15);
        if (d<0. || t>end) break;
    }
    return max(shade, 0.);
}


float calcAO(in vec3 p, in vec3 n){
    float sca = 3., occ = 0.;
    for( int i = 0; i<5; i++ ){
        float hr = float(i + 1)*.15/5.;
        float d = map(p + n*hr);
        occ += (hr - d)*sca;
        sca *= .7;
    }
    return clamp(1. - occ, 0., 1.);
}


void mainImage( out vec4 fragColor, in vec2 fragCoord ){
    vec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.y;
    #ifdef HEXAGON
    scale *= vec2(2./1.732, 1);
    #endif
    vec3 ro = vec3(0, iTime/16., -1.5);
    vec3 lk = ro + vec3(0, .05, .25);
    vec3 lp = ro + vec3(-.25, .5, .5);
    float FOV = 1.; // FOV - Field of view.
    vec3 fwd = normalize(lk-ro);
    vec3 rgt = normalize(vec3(fwd.z, 0., -fwd.x ));
    vec3 up = cross(fwd, rgt);
    vec3 rd = normalize(uv.x*rgt + uv.y*up + fwd/FOV);
    rd.xy *= rot2( sin(iTime)/32. );
    float t = trace(ro, rd);
    vec4 svGID = gID;
    float svObjID = objID;
    vec3 col = vec3(0);
    if(t < FAR){
        vec3 sp = ro + rd*t;
        vec3 sn = getNormal(sp, t);
        vec3 ld = lp - sp;
        float lDist = max(length(ld), .001);
        ld /= lDist;
        float sh = softShadow(sp, lp, sn, 16.);
        float ao = calcAO(sp, sn);
        float atten = 1./(1. + lDist*.05);
        float diff = max( dot(sn, ld), 0.);
        float spec = pow(max(dot(reflect(ld, sn), rd ), 0.), 32.);
        float Schlick = pow( 1. - max(dot(rd, normalize(rd + ld)), 0.), 5.);
        float freS = mix(.15, 1., Schlick);  //F0 = .2 - Glass... or close enough.
        vec3 texCol;
        if(svObjID<.5){
            // Blend between 3 colors for prisms
            const vec3 color1 = {{ color1 }};
            const vec3 color2 = {{ color2 }};
            const vec3 color3 = {{ color3 }};
            float t = fract(hash21(svGID.yz + iSeed)); // or use another property for blending
            if(t < 0.5) {
                texCol = mix(color1, color2, t * 2.0);
            } else {
                texCol = mix(color2, color3, (t - 0.5) * 2.0);
            }
        }
        else {
            texCol = (sp.z>scale.y - .01)? vec3(.2, .4, 1) : vec3(.05);
            texCol = mix(texCol, texCol.yzx, smoothstep(-.25, .5, -ld.y)*.25);
        }
        col = texCol*(diff*sh + .3 + vec3(1, .97, .92)*spec*freS*2.*sh);
        col *= ao*atten;
    }
    fragColor = vec4(sqrt(max(col, 0.)), 1);
}
