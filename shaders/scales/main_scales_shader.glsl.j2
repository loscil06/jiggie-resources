const vec3 color1 = {{ color1 }};
const vec3 color2 = {{ color2 }};
{% if color3 %}
const vec3 color3 = {{ color3 }};
{% endif %}

void mainImage( out vec4 O, vec2 uv )
{
    vec2 R = iResolution.xy,
    U = uv = (uv-R/2.)/R.y * 10. *  1.73/2.;  // centered coords

U *= mat2(1,-1./1.73, 0,2./1.73);            // conversion to
vec3 g = vec3(U,1.-U.x-U.y), g2,              // hexagonal coordinates
id = floor(g);                            // cell id

g = fract(g);                                 // diamond coords
if (length(g)>1.) g = 1.-g;                   // barycentric coords
g2  = (2.*g-1.);                              // distance to borders

U = id.xy * mat2(1,.5, 0,1.73/2.);

float l00 = length(U-uv),                     // screenspace distance to nodes
l10 = length(U+vec2(1,0)-uv),
l01 = length(U+vec2(.5,1.73/2.)-uv),
l11 = length(U+vec2(1.5,1.73/2.)-uv),
l20 = length(U+vec2(2,0)-uv),
l = min(min(min(l00, l10), min( l01, l11)),l20); // closest node
//vec2 C = U+ ( l==l00 ? vec2(0) : l==l10 ? vec2(1,0) : l==l01 ? vec2(.5,1.73/2.) : l==l11 ? vec2(1.5,1.73/2.) : vec2(2,0)  );

// making fish scales
float k = .75+.25*sin(iTime);
id += l20<k ? vec3(2,0,0) : l11<k ?  vec3(1,1,0) : l10<k ? vec3(1,0,0) : l01<k ? vec3(0,1,0) : vec3(0);
vec2 C = id.xy * mat2(1,.5, 0,1.73/2.);

// 3 colors
{% if color3 %}
vec3 scaleColor;
float idx = mod(id.x + id.y, 3.0);
if (idx < 1.0) {
scaleColor = color1;
} else if (idx < 2.0) {
scaleColor = color2;
} else {
scaleColor = color3;
}
O = vec4(scaleColor, 1.0);
O *= .75 + .25 * sin(60. * length(uv - C));
{% else %}
vec3 scaleColor = mod(id.x + id.y, 2.0) < 1.0 ? color1 : color2;
O = vec4(scaleColor, 1.0);
O *= .75 + .25 * sin(60. * length(uv - C));
{% endif %}
}