#define M_PI (3.1415926535897932384626433832795)

const float iSeed = {{ seed }}; // dont set beyond 1200, otherwise it will repeat itself too much

float dot2( in vec2 v ) { return dot(v,v); }
float dot2( in vec3 v ) { return dot(v,v); }
float ndot( in vec2 a, in vec2 b ) { return a.x * b.x - a.y * b.y; }

vec2 random2(vec2 st){
    st = vec2(dot(st,vec2(127.1,311.7)), dot(st,vec2(269.5,183.3)));
    return -1.0 + 2.0 * fract(sin(st) * 7.);
}

float noise2(vec2 st) {
    vec2 i = floor(st);
    vec2 f = fract(st);
    vec2 u = f*f*(3.0-2.0*f);
    return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),
                     dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),
                mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),
                     dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);
}

float fbm2(vec2 coord) {
    float value = 0.0;
    float scale = 0.2;
    for (int i = 0; i < 4; i++) {
        value += noise2(coord) * scale;
        coord *= 2.0;
        scale *= 0.5;
    }
    return value + 0.2;
}

// abstract map

#define C8(value) ((float)(value) / 255.0f))
#define NUM_COLORS (4)
const float stepSize = 0.02;
const float epsilon = 0.001;
const vec3 colorLUT[4] = vec3[](
{{ color_1 }},
{{ color_2 }},
{{ color_3 }},
{{ color_4 }}
);
const float invIdxMult = float(NUM_COLORS) * stepSize * 3.0;

// introduce randomness here
float height(vec2 pixel) {
    return pow(fbm2(pixel * 0.002 + vec2(134.1, 826.0) + iSeed), 1.248);
}

float plateau(float h) {
    return floor(h / stepSize);
}

float contour(vec2 p, float dx) {
    vec3 d = vec3(dx, 0.0, -dx);
    float h = plateau(height(p));
    float a =
    plateau(height(p + d.xy)) +
    plateau(height(p + d.yx)) +
    plateau(height(p + d.zy)) +
    plateau(height(p + d.yz)) +
    plateau(height(p + d.xx)) +
    plateau(height(p + d.zz)) +
    plateau(height(p + d.xz)) +
    plateau(height(p + d.zx));
    return smoothstep(0.0, epsilon, abs(a / 8.0 - h));
}

vec3 landform(vec2 p) {
    float h = plateau(height(p));
    int i = clamp(int(h * invIdxMult), 0, NUM_COLORS - 1);
    float m = mod(h * invIdxMult, 1.0);
    return mix(colorLUT[i], colorLUT[i + 1], m);
}

const float scaler = 0.485;
const float contourStroke = 0.38;

#define CONTOUR 1
vec3 shade(vec2 p) {
    #if CONTOUR
    vec3 ctColor = vec3(0.1);
    float ct = contour(p, contourStroke * scaler);
    return mix(landform(p), ctColor, ct);
    #else
    return landform(p);
    #endif
}

#define AA 3


void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 uv = (gl_FragCoord.xy / iResolution.y) * 2.0 - 1.0;
    vec2 p = gl_FragCoord.xy * scaler;
    vec3 accum = vec3(0.0);

    #if AA > 0
    for (int m = 0; m < AA; m++)
    for (int n = 0; n < AA; n++)
    {
        accum += shade(p + vec2(float(m), float(n)) * scaler * 0.6);
    }
    accum /= float(AA * AA);
    #else
    accum = shade(p);
    #endif

    fragColor = vec4(accum, 1.0);
}
